using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

namespace MSSQL_exploit
{
    class MsSql
    {
        private static string _conStr = "";
        private static SqlConnection _con = null;
        private static SqlCommand _cmd = null;

        public static string SetConnection(string server, string database, string user_id, string pwd)
        {
            string con = "Data Source=" + server + ";Database=" + database + ";user id=" + user_id + ";password=" + pwd;
            try
            {
                SqlConnection cn = new SqlConnection(con);
                cn.Open();
                cn.Close();
                _conStr = con;
                return "";
            }
            catch(Exception ex) { return ex.Message; }

            return "Invalid credential!";
        }

        private static int _dtIdentity = 0;
        private static void _OpenCon(string commandText, Dictionary<string, string> parse_params = null)
        {
            _con = new SqlConnection(_conStr);
            try
            {
                _con.Open();
            }
            catch { }
            _cmd = new SqlCommand(commandText, _con);

            if ((parse_params == null) == false)
            {
                foreach (KeyValuePair<string, string> p in parse_params)
                {
                    if(p.Value != null) _cmd.Parameters.AddWithValue(p.Key, p.Value);
                    else _cmd.Parameters.AddWithValue(p.Key, DBNull.Value);
                }
            }
        }

        private static void _CloseCon()
        {
            _con.Close();
            _con = null;
            _cmd = null;
        }

        public static object ExecuteScalar(string commandText, Dictionary<string, string> @params = null)
        {
            DataTable dt = ExecuteQuery(commandText, @params);
            if (dt.Rows.Count < 1) return null;
            return dt.Rows[0][0];
        }

        public static int ExecuteNonQuery(string commandText, Dictionary<string, string> @params = null)
        {
            _OpenCon(commandText, @params);
            int robj = _cmd.ExecuteNonQuery();
            _CloseCon();
            return robj;
        }

        public static DataTable ExecuteQuery(string commandText, Dictionary<string, string> @params = null)
        {
            SqlDataAdapter adt = new SqlDataAdapter(commandText, _conStr);
            if ((@params == null) == false)
            {
                foreach (KeyValuePair<string, string> p in @params)
                {
                    if (p.Value != null) adt.SelectCommand.Parameters.AddWithValue(p.Key, p.Value);
                    else adt.SelectCommand.Parameters.AddWithValue(p.Key, DBNull.Value);
                }
            }
            DataTable dt = new DataTable("dt_ms_" + _dtIdentity.ToString());
            adt.Fill(dt);
            _dtIdentity += 1;
            return dt;
        }
    }
}
